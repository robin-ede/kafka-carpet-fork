plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.3'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.minecraft_version+'-'+project.mod_version+'+v'+new Date().format('yyMMdd')
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/carpet.accesswidener")
	runtimeOnlyLog4j = true
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()


	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	//modImplementation "net.fabricmc:fabric:${project.fabric_version}"
	//modCompileOnly fabricApi.module("fabric-rendering-v1", project.fabric_version)

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	compileOnly "com.google.code.findbugs:jsr305:${project.jsr305_version}"
	// https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
	implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.8.0'
}

processResources {
	inputs.property "version", project.version+'+v'+new Date().format('yyMMdd')

	filesMatching("fabric.mod.json") {
		expand "version": project.mod_version+'+v'+new Date().format('yyMMdd')
	}
}


tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.20.5 upwards uses Java 21.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		maven {
			url "$projectDir/publish"
		}
	}
}

// Ensure shadowJar only includes third-party dependencies (like Kafka)
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	archiveClassifier.set('shadow')

	// Include Kafka client and all of its transitive dependencies
	dependencies {
		include(dependency('org.apache.kafka:kafka-clients'))
		include(dependency('com.github.luben:zstd-jni'))
		include(dependency('org.lz4:lz4-java'))
		include(dependency('org.xerial.snappy:snappy-java'))
		include(dependency('org.slf4j:slf4j-api'))
	}

	mergeServiceFiles()  // Ensures that Kafka's internal service files are merged correctly
}

// Remap the shaded JAR to use intermediary names
tasks.named('remapJar') {
	dependsOn tasks.named('shadowJar')
	inputFile.set(tasks.named('shadowJar').get().archiveFile)  // Correctly access archiveFile without get()
	archiveClassifier.set('')  // Make the final JAR without classifier
}

// Ensure that build depends on the remapJar task
tasks.build {
	dependsOn tasks.named('remapJar')
}
